#!/bin/bash

# CORE
export VISUAL=nvim
export EDITOR="$VISUAL"
# Append last command to history before returning prompt. This will save bash
# history even if multiple bash sessions are in use.
export PROMPT_COMMAND='history -a'

# env() {
#     /usr/bin/env | sort
# }

### FZF
# Install fzf triggers
[ -f "$HOME/.fzf.zsh" ] && source "$HOME/.fzf.zsh"

### GPG
# For signing git commits.
# If you need a new GPG key:
#   gpg --full-generate-key
#   gpg --list-secret-keys --keyid-format=long
#   gpg --armor --export .....
export GPG_TTY=$(tty)

### GIT
export PATH="$HOME/.git-commands:$PATH"

alias gpoht='git push origin HEAD && git push origin --tags'
alias gt='git tag'
alias gdmh='git diff master HEAD'
alias git-flush='git add . && git reset HEAD --hard'

function git-fetch-upstream-push() {
	branch=$(git branch --show-current)
	if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
		git fetch upstream "$branch"
		git pull upstream "$branch"
		git push origin "$branch"
		git fetch
	else
		echo "Can not gupm while on $branch"
	fi
}

function git-pull-origin() {
	branch=$(git branch --show-current)
	if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
		git pull origin "$branch"
	else
		echo "Can not gupm while on $branch"
	fi
}

function gupm() {
	stat .git/refs/remotes/upstream &> /dev/null
	if [ $? -ne 0 ]; then
        # No upstream defined.
		git-pull-origin
	else
        git-fetch-upstream-push
	fi
}

function gcom() {
    git branch | grep '^\s\+main$' &> /dev/null
	if [ $? -ne 0 ]; then
		git checkout master
	else
		git checkout main
	fi
}


git-help() {
  echo "gt — git tag"
  echo "gdct — git describe --tags 'git rev-list --tags --max-count=1'"
  echo "gpoat — git push origin --all && git push origin --tags"
  echo "gpoht — git push origin HEAD && git push origin tag"
  echo "gdtag - git tag --delete <tag> && git push origin :refs/tags/<tag>"
  echo "gdmh - git diff master HEAD"
  echo "gupm - git fetch upstream && git pull upstream master && git push origin master"
}

### PyEnv
export PYENV_VIRTUALENV_DISABLE_PROMPT=0
# Add pyenv to path
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
# Add shims to PATH
# Add pyenv autocompletion
eval "$(pyenv init -)"
# Add pyenv virtualenv autocompletion to path
# This can really slow down CLI prompt
# eval "$(pyenv virtualenv-init -)"

### pipx
# First install pipx. Then install argcomplete
# to get arg completion.
if command -v register-python-argcomplete &> /dev/null
then
	eval "$(register-python-argcomplete pipx)"
fi
export PATH="$HOME/.local/bin:$PATH"

### Golang
export GOPATH="$HOME/Code/go"
export PATH="$GOPATH/bin:$PATH"
alias godoc='GO111MODULE=off godoc'

### gcloud
# The next line updates PATH for the Google Cloud SDK.
# The next line enables shell command completion for gcloud.
if [ -f "$HOMEBREW_PREFIX/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOMEBREW_PREFIX/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"; fi

### Node/JS
export NVM_DIR="$HOME/.nvm"
[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"  # This loads nvm
[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Maybe install prettier into coc libs and set diff prettierPath?
# $ npm --global list
# /usr/local/lib
# ├── npm@8.9.0
# ├── prettier-plugin-java@1.6.2
# └── prettier@2.7.1
# npm install --global --save-exact prettier prettier-plugin-java
# "prettier.resolveGlobalModules": true,
# "prettier.prettierPath": "/usr/local/lib/node_modules/prettier",

### Java
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
#export JAVA_HOME=/opt/homebrew/Cellar/openjdk/19.0.2
#export MAVEN_OPTS="-Dorg.slf4j.simpleLogger.defaultLogLevel=warn"

if [[ -n "$TMUX_PANE" ]]; then
    export TMUX_SESSION=$(tmux list-panes -t "$TMUX_PANE" -F '#S' | head -n1)
fi

tmux-help() {
  echo "Rename pane: select-pane -t 1 -T 'Test'"
  echo "Show pane names: set pane-border-status"
}
